#!/bin/bash
#
# Functions used for installation script.

source ./parameters

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

print_line () {

  message=$1

  format="%s\n"
  printf "${format}" "-= $message"

}

print_title () {
  message=$1

  format="%s\n"
  printf "${format}" "--=== $message ===--"
}

print_divider () {

  format="=%.s"
  printf "${format}" {1..80} ; echo

}

verify_loc () {

  location=$1

  if [ -d $location ] || [ -f $location ]; then
    print_line "I: Located ${location}."
  else
    print_line "E: Unable to locate ${location}."
    exit 127
  fi

}

##################################################
# Evaulates a return code and prints appropriate message
# Globals:
#   None
# Arguments:
#   Return Code (integer value)
#   Message to print for success (return code 0)
#   Message to print for failure (non-zero return code)
# Returns:
#   Error code 127 if return code != 0
##################################################
rc_eval () {

  return_code=$1
  success_message="$2"
  failure_message="$3"

  if [ "$return_code" == 0 ]; then
    print_line "$success_message"
  else
    print_line "$failure_message"
    exit 127
  fi

}

##################################################
# Create directory, but do not overwrite if already exists.
# Globals:
#   None
# Arguments:
#   Directory to create
# Returns:
#   None
##################################################
create_dir () {

  new_dir=$1

  if [ ! -d ${new_dir} ]; then
    print_line "I: Cannot locate ${new_dir}. Creating..."
    mkdir -p ${new_dir} ; rc=$?
    rc_eval "${rc}" "I: Successfully created ${new_dir}." \
      "E: Unable to create ${new_dir}."
  else
    print_line "I: Directory ${new_dir} already exists. Skipping."
  fi

}

##################################################
# Unpack and install media into target location.
# Globals:
#   None
# Arguments:
#   Media file location, ZIP format
#   Target location for software
# Returns:
#   None
##################################################
extract_zip_media () {

  media=$1
  unpack_loc=$2

  if [ ! -f ${media} ]; then
    print_line "E: Unable to locate ${media}."; exit 127
  fi

  unzip -q $media -d $unpack_loc ; rc=$?

  rc_eval "${rc}" "I: Successfully unpacked ${media} to ${unpack_loc}." \
    "E: Unable to unpack ${media} to ${unpack_loc}."

}

##################################################
# Replace all placeholder variables (strings) in files.
# Globals:
#   None
# Arguments:
#   String to be replaced
#   New string
#   Target file
# Returns:
#   None
##################################################
replace_var () {

  target_str=$1
  new_str=$2
  target_file=$3

  # Escape (most) special characters to prevent issues with replacement.
  esc_new_str="$(echo ${new_str} | sed 's/\\/\\&/g;s/\//\\&/g;s/\./\\&/g;s/\$/\\&/g;s/\*/\\&/g;s/\[/\\&/g;s/\]/\\&/g;s/\^/\\&/g')"

  #print_line "I: Replacing ${target_str} with ${new_str} in $target_file."

  sed -i "s/${target_str}/${esc_new_str}/g" $target_file ; rc=$?

  if [ "${rc}" != 0 ]; then
    print_line "E: Unable to replace ${target_str} with ${new_str}"
  fi

}

##################################################
# Add value to vault.
# Globals:
#   WILDFLY_HOME
#   VAULT_KEYSTORE
#   VAULT_ENC_FILE_DIR
#   VAULT_ALIAS
#   VAULT_SALT
#   VAULT_ITERATION_COUNT
# Arguments:
#   Vault password
#   Attribute Name
#   Vault block
#   Secured value (ex. password)
# Returns:
#   None
##################################################
vault_add_item () {

  vault_pass=$1
  attribute=$2
  block=$3
  sec_value=$4

  # Build vault command.
  vault_cmd="${WILDFLY_HOME}/bin/vault.sh -e ${VAULT_ENC_FILE_DIR} \
    -k ${VAULT_KEYSTORE} \
    -p \"${vault_pass}\" \
    -s ${VAULT_SALT} \
    -v ${VAULT_ALIAS} \
    -i ${VAULT_ITERATION_COUNT} \
    -a ${attribute} \
    -b ${block} \
    -x ${sec_value}"

  print_line "I: Adding $attribute to vault in block $block"

  $vault_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully added ${attribute} to vault." \
    "E: Failed to add ${attribute} to vault."

}

##################################################
# Execute Wildfly CLI script on a standalone instance.
# Globals:
#   HOSTNAME
# Arguments:
#   IP Address
#   Script
# Returns:
#   None
##################################################
execute_cli_script () {

  ip_addr="$1"
  cli_script="$2"

  jboss_cmd="${WILDFLY_HOME}/bin/jboss-cli.sh -c \
    --controller=${ip_addr}:9990 \
    --file=${cli_script}"

  print_line "I: Executing ${cli_script}."

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully executed ${cli_script}." \
    "E: Execution of ${cli_script} failed."

}

##################################################
# Execute Wildfly CLI command on a standalone instance.
# Globals:
#   HOSTNAME
# Arguments:
#   IP Address
#   Command
# Returns:
#   None
##################################################
execute_cli_command () {

  ip_addr="$1"
  cli_command="$2"

  jboss_cmd="${WILDFLY_HOME}/bin/jboss-cli.sh -c \
    --controller=${ip_addr}:9990 \
    --command=${cli_command}"

  print_line "I: Executing command \"${cli_command}\"."

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully executed command \"${cli_command}\"." \
    "E: Execution of command \"${cli_command}\" failed."

}


##################################################
# Apply Wildfly patch.
# Globals:
#   WILFLY_HOME
#   HOSTNAME
# Arguments:
#   Patch file
# Returns:
#   None
##################################################
apply_patch () {

  patch_file="${1}"

  jboss_cmd="${WILDFLY_HOME}/bin/jboss-cli.sh \
    \"patch apply --override-all ${patch_file}\""

  print_line "I: Applying patch ${patch_file}"

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully applied patch ${patch_file}" \
    "E: Application of patch ${patch_file} failed."

}

##################################################
# Starts or stops Wildfly on a standalone install.
# Globals:
#   WILDFLY_HOME
# Arguments:
#   Start or Stop
# Returns:
#   None
##################################################
start_stop_standalone () {

  cmd="${1}"
  export JBOSS_CONF=$WILDFLY_HOME/conf/standalone/wildfly.conf

  jboss_cmd="${WILDFLY_HOME}/conf/scripts/wildfly-init.sh $cmd"

  print_line "I: Beginning Wildfly ${cmd}."

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Wildfly ${cmd} completed." \
    "E: Wildfly ${cmd} failed."

}

##################################################
# Adds a local management account to the wildfly
#   installation
# Globals:
#   WILDFLY_HOME
# Arguments:
#   Username
#   Password
# Returns:
#   None
##################################################
add_local_user () {

  user=$1
  pass=$2

  cmd="${WILDFLY_HOME}/bin/add-user.sh -s -u $user -p $pass -r ManagementRealm"

  print_line "I: Adding '$user' local user."

  $cmd ; rc=$?

  rc_eval "${rc}" "I: User '$user' added successfully." \
    "E: Failed to add user '${user}'."

}

##################################################
# Starts or stops Wildfly on a domain install.
# Globals:
#   WILDFLY_HOME
# Arguments:
#   Start or Stop
# Returns:
#   None
##################################################
start_stop_domain () {

  cmd="${1}"
  export JBOSS_CONF=$WILDFLY_HOME/conf/domain/wildfly.conf

  jboss_cmd="${WILDFLY_HOME}/conf/scripts/wildfly-init.sh $cmd"

  print_line "I: Beginning Wildfly ${cmd}."

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Wildfly ${cmd} completed." \
    "E: Wildfly ${cmd} failed."

}

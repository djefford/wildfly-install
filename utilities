#!/bin/bash
#
# Functions used for isntallation script.

err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

print_line () {

  message=$1

  format=" %s\n"
  printf "${format}" "$1" 

}

print_divider () {

  format="=%.s"
  printf "${format}" {1..50} ; echo

}

verify_loc () {

  location=$1

  if [ -d $location ] || [ -f $location ]; then
    print_line "I: Located ${location}."
  else
    print_line "E: Unable to locate ${location}."
    exit 127
  fi 

}

##################################################
# Evaulates a return code and prints appropriate message
# Globals:
#   None
# Arguments:
#   Return Code (integer value)
#   Message to print for success (return code 0)
#   Message to print for failure (non-zero return code)
# Returns:
#   None
##################################################
rc_eval () {

  return_code=$1
  success_message="$2"
  failure_message="$3"

  if [ "$return_code" == 0 ]; then
    print_line "$success_message"
  else
    print_line "$failure_message"
  fi

}

##################################################
# Create directory, but do not overwrite if already exists.
# Globals:
#   None
# Arguments:
#   Directory to create
# Returns:
#   None
##################################################
create_dir () {

  new_dir=$1

  if [ ! -d ${new_dir} ]; then

    print_line "I: Cannot locate ${new_dir}. Creating..."
    mkdir -p ${new_dir} ; rc=$?

    rc_eval "${rc}" "I: Successfully created ${new_dir}." \
      "E: Unable to create ${new_dir}."

  else
    print_line "I: Directory ${new_dir} already exists. Skipping."
  fi

}

##################################################
# Unpack and install media into target location.
# Globals:
#   None
# Arguments:
#   Media file location, ZIP format
#   Target location for software
# Returns:
#   None
##################################################
extract_zip_media () {

  media=$1
  unpack_loc=$2

  if [ ! -f ${media} ]; then
    print_line "E: Unable to locate ${media}."; exit 127
  fi

  unzip -q $media -d $unpack_loc ; rc=$?

  rc_eval "${rc}" "I: Successfully unpacked ${media} to ${unpack_loc}." \
    "E: Unable to unpack ${media} to ${unpack_loc}."

}

##################################################
# Replace all placeholder variables (strings) in files.
# Globals:
#   None
# Arguments:
#   String to be replaced
#   New string
#   Target file
# Returns:
#   None
##################################################
replace_var () {

  target_str=$1
  new_str=$2
  target_file=$3

  # Escape (most) special characters to prevent issues with replacement.
  esc_new_str="$(echo \"${new_str}\" | sed 's/\\/\\&/g;s/\//\\&/g;s/\./\\&/g;s/\$/\\&/g;s/\*/\\&/g;s/\[/\\&/g;s/\]/\\&/g;s/\^/\\&/g')"

  print_line "I: Replacing ${target_str} with ${new_str}."

  sed -i "s/${target_str}/${esc_new_str}/g" $file ; rc=$?

  rc_eval "${rc}" "I: Successfully replaced ${target_str} with ${new_str}" \
    "E: Unable to replace ${target_str} with ${new_str}"

}

##################################################
# Add value to vault.
# Globals:
#   WILDFLY_HOME
#   VAULT_KEYSTORE
#   VAULT_FILE_DIR
#   VAULT_ALIAS
#   VAULT_SALT
#   VAULT_ITERATION
# Arguments:
#   Vault password
#   Attribute Name
#   Vault block
#   Secured value (ex. password)
# Returns:
#   None
##################################################
vault_add_item () {

  vault_pass=$1
  attribute=$2
  block=$3
  sec_value=$4

  # Build vault command.
  vault_cmd="${WILDFLY_HOME}/bin/vault.sh -e ${VAULT_FILE_DIR} \
    -k ${VAULT_KEYSTORE} \
    -p \"${vault_pass}\" \
    -s ${VAULT_SALT} \
    -v ${VAULT_ALIAS} \
    -i ${VAULT_ITERATION} \
    -a ${attribute} \
    -b ${block} \
    -x ${sec_valut}"

  print_line "I: Adding $attribute to vault in block $block"

  $vault_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully added ${attribute} to vault." \
    "E: Failed to add ${attribute} to vault."

}

##################################################
# Execute Wildfly CLI script on a standalone instance.
# Globals:
#   WILDFLY_HOME
#   HOSTNAME
# Arguments:
#   Script
# Returns:
#   None
##################################################
execute_standalone_cli () {

  cli_script="$1"

  jboss_cmd="${WILDFLY_HOME}/bin/jboss-cli.sh -c \
    --controller=${HOSTNAME}:9990 \
    --file=${cli_script}"

  print_line "I: Executing ${script}."

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully executed ${script}." \
    "E: Execution of ${script} failed."

}

##################################################
# Execute Wildfly CLI command on a standalone instance.
# Globals:
#   WILDFLY_HOME
#   HOSTNAME
# Arguments:
#   Command
# Returns:
#   None
##################################################
execute_standalone_command () {

  cli_command="$1"

  jboss_cmd="${WILDFLY_HOME}/bin/jboss-cli.sh -c \
    --controller=${HOSTNAME}:9990 \
    --command=${cli_command}"

  print_line "I: Executing command: \"${command}\"."

  $jboss_cmd ; rc=$?

  rc_eval "${rc}" "I: Successfully executed command \"${command}\"." \
    "E: Execution of command \"${command}\" failed."

}


